<div class="discrete-progress-tracker-container">
    @for (var i = 0; i < this.CompletedSteps; i++)
    {
        @CompletedStepTemplate
    }

    @if (this.CompletedSteps < this.TotalSteps)
    {
        @CurrentStepTemlpate

        @for (var i = this.CompletedSteps + 1; i < this.TotalSteps; i++)
        {
            if (i < this.TotalSteps - 1)
            {
                @IncompleteStepTemplate
            }
            else
            {
                @LastIncompleteStepTemplate
            }
        }
    }
</div>

@code
{
    private RenderFragment incompleteStepTemplate;
    private RenderFragment lastStepTemplate;

    /// <summary>
    /// Specifies the total number of steps to track
    /// </summary>
    [Parameter]
    public int TotalSteps { get; set; }

    /// <summary>
    /// Specifies the number of completed steps - progress
    /// </summary>
    [Parameter]
    public int CompletedSteps { get; set; }

    /// <summary>
    /// Specifies the template for a completed step
    /// </summary>
    [Parameter]
    public RenderFragment CompletedStepTemplate { get; set; }

    /// <summary>
    /// Specifies the template for the current step/
    /// </summary>
    /// <remarks>This template is optional</remarks>
    [Parameter]
    public RenderFragment CurrentStepTemlpate { get; set; }

    /// <summary>
    /// Specifies the template for an incomplete step
    /// </summary>
    [Parameter]
    public RenderFragment IncompleteStepTemplate
    {
        get => this.incompleteStepTemplate;
        set
        {
            this.incompleteStepTemplate = value;
            if (this.CurrentStepTemlpate == null)
                this.CurrentStepTemlpate = value;

            if (this.LastIncompleteStepTemplate == null)
                this.LastIncompleteStepTemplate = value;
        }
    }

    /// <summary>
    /// Specifies the template for the last step, when it's not yet current or complete.
    /// </summary>
    /// <remarks>This template is optional</remarks>
    [Parameter]
    public RenderFragment LastIncompleteStepTemplate { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
