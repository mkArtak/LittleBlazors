<div class="@WizardPageContainerClassName">
    <CascadingValue Value="this">
        <CascadingValue Value="StateManager">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</div>

<div class="@FooterContainerClassName">
    @if (this.CanGoBack)
    {
        <button id="btnNext" @onclick="NavigateBack">Back</button>
    }

    @if (this.CanGoNext || this.SupportCompletion)
    {
        <button id="btnNext" @onclick="NavigateForward">@NextButtonTitle</button>
    }
</div>

@code{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool SupportCompletion { get; set; } = false;

    [Parameter]
    public EventCallback<IWizardStateManager> OnComplete { get; set; }

    [Parameter]
    public string FooterContainerClassName { get; set; } //= "wizardFooterContainer";

    [Parameter]
    public string WizardPageContainerClassName { get; set; } //= "wizardPageContainerClassName";

    private int currentPage = 0;

    internal WizardPage CurrentPage => this.Pages[currentPage];

    internal IWizardStateManager StateManager { get; } = new WizardStateManager();

    private bool CanGoNext => this.currentPage < this.Pages.Count - 1;

    private bool CanGoBack => this.currentPage > 0;

    private string NextButtonTitle => CanGoNext ? "Next" : "Finish";

    private List<WizardPage> Pages { get; } = new List<WizardPage>();

    internal void AddPage(WizardPage page)
    {
        this.Pages.Add(page);
        this.StateHasChanged();
    }

    /// <summary>
    /// Navigates to the next page of the wizard.
    /// If currently at the last page and <see cref="SupportCompletion"/> is true, then the completion event will be triggered.
    /// Otherwise, the navigation will result in no action.
    /// </summary>
    public async Task NavigateForward()
    {
        if (this.CanGoNext)
            await this.TurnToPage(this.currentPage + 1);
        else
        {
            this.CurrentPage.StoreState();
            await this.OnComplete.InvokeAsync(this.StateManager);
        }
    }

    /// <summary>
    /// Navigates to the previous page of the wizard, if not at the first page.
    /// </summary>
    public async Task NavigateBack()
    {
        if (this.CanGoBack)
            await this.TurnToPage(this.currentPage - 1);
    }

    private async Task TurnToPage(int page)
    {
        this.CurrentPage.StoreState();
        await this.CurrentPage.OnNavigatingAway();
        this.currentPage = page;
        await this.CurrentPage.OnNavigatedTo();
    }
}