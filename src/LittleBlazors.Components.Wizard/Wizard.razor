@using Microsoft.Extensions.Logging
@inject ILogger<Wizard> logger

<div class="@WizardPageContainerClassName">
    <CascadingValue Value="this">
        <CascadingValue Value="StateManager">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</div>

<div class="@FooterContainerClassName">
    @if (this.CanGoBack)
    {
        <button @onclick="NavigateBack" class="@BackButtonClassName">@BackButtonTitle</button>
    }

    @if (this.CanGoNext)
    {
        <button @onclick="NavigateForward" class="@NextButtonClassName">@NextButtonTitle</button>
    }
    else if (this.SupportCompletion)
    {
        <button @onclick="CompleteWizard" class="@FinishButtonClassName">@FinishButtonTitle</button>
    }
</div>

@code{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Specifies whether the wizard supports a notion of completion or not.
    /// If yes, the `Next` button will show as `Finish` when on the last page.
    /// The <see cref="OnComplete"/> callback will fire only when this property is value is `true`.
    /// </summary>
    [Parameter]
    public bool SupportCompletion { get; set; } = false;

    /// <summary>
    /// Fired when the user passes beyond the last page of the wizard, only when the <see cref="SupportCompletion"/> is `truee`.
    /// </summary>
    [Parameter]
    public EventCallback<IWizardStateManager> OnComplete { get; set; }

    /// <summary>
    /// Specifies the name of the css class to apply to the footer container, where the `back` and `next` buttons are
    /// </summary>
    [Parameter]
    public string FooterContainerClassName { get; set; } //= "wizardFooterContainer";

    /// <summary>
    /// Specifies the css class to apply to the `Back` button
    /// </summary>
    [Parameter]
    public string BackButtonClassName { get; set; }

    /// <summary>
    /// Specifies the css class to apply to the `Next` button
    /// </summary>
    [Parameter]
    public string NextButtonClassName { get; set; }

    /// <summary>
    /// Specifies the css class to apply to the `Finish` button
    /// </summary>
    [Parameter]
    public string FinishButtonClassName { get; set; }

    /// <summary>
    /// Specifies the label of the `Back` button
    /// </summary>
    [Parameter]
    public string BackButtonTitle { get; set; } = "Back";

    /// <summary>
    /// Specifies the label of the `Next` button
    /// </summary>
    [Parameter]
    public string NextButtonTitle { get; set; } = "Next";

    /// <summary>
    /// Specifies the label of the `Finish` button
    /// </summary>
    [Parameter]
    public string FinishButtonTitle { get; set; } = "Finish";

    /// <summary>
    /// Specifies the css class name of the pages container
    /// </summary>
    [Parameter]
    public string WizardPageContainerClassName { get; set; } //= "wizardPageContainerClassName";

    private int currentPage = 0;

    internal WizardPage CurrentPage => this.Pages[currentPage];

    internal IWizardStateManager StateManager { get; } = new WizardStateManager();

    private bool CanGoNext => this.currentPage < this.Pages.Count - 1;

    private bool CanGoBack => this.currentPage > 0;

    private List<WizardPage> Pages { get; } = new List<WizardPage>();

    internal void AddPage(WizardPage page)
    {
        this.logger.LogDebug($"Adding page {page.Title} to wizard");
        this.Pages.Add(page);
        this.StateHasChanged();
    }

    /// <summary>
    /// Navigates to the next page of the wizard.
    /// If currently at the last page and <see cref="SupportCompletion"/> is true, then the completion event will be triggered.
    /// Otherwise, the navigation will result in no action.
    /// </summary>
    public async Task<bool> NavigateForward()
    {
        if (!this.CanGoNext)
            return false;

        await this.TurnToPage(this.currentPage + 1);
        this.StateHasChanged();

        return true;
    }

    /// <summary>
    /// Navigates to the previous page of the wizard, if not at the first page.
    /// </summary>
    public async Task<bool> NavigateBack()
    {
        if (!this.CanGoBack)
            return false;

        await this.TurnToPage(this.currentPage - 1);
        this.StateHasChanged();

        return true;
    }

    private async Task CompleteWizard()
    {
        this.CurrentPage.StoreState();
        await this.OnComplete.InvokeAsync(this.StateManager);
        this.StateHasChanged();
    }

    private async Task TurnToPage(int page)
    {
        this.CurrentPage.StoreState();
        await this.CurrentPage.OnNavigatingAway();
        this.currentPage = page;
        await this.CurrentPage.OnNavigatedTo();
    }
}