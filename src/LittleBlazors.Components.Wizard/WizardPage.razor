@using System.Reflection

@if (this.IsPageActive)
{
    @ChildContent
}

@code {
    [CascadingParameter]
    protected Wizard Wizard { get; set; }

    [CascadingParameter]
    protected IWizardStateManager StateManager { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; }

    protected override Task OnInitializedAsync()
    {
        this.Wizard.AddPage(this);

        return base.OnInitializedAsync();
    }

    public void StoreState()
    {
        ForEachStateProperty((pi, sa) =>
        {
            this.StateManager.Set(GetStoreManagerKeyNameForProperty(sa, pi), pi.GetValue(this));
        });
    }

    public void RestoreState()
    {
        ForEachStateProperty((pi, sa) =>
        {
            if (this.StateManager.TryGet(GetStoreManagerKeyNameForProperty(sa, pi), out var value))
            {
                pi.SetValue(this, value);
            }
        });
    }

    private static string GetStoreManagerKeyNameForProperty(StateAttribute sa, PropertyInfo pi)
    {
        return sa.Key ?? pi.Name;
    }

    /// <summary>
    /// Indicates whether the page is currently active in the wizard or not.
    /// Rendering of each page depends on this flag. If the value is `false`, no content should be rendered.
    /// This is important for pages, which derieve from the <see cref="WizardPage"/> component.
    /// </summary>
    protected bool IsPageActive => this.Wizard.CurrentPage == this;

    private void ForEachStateProperty(Action<PropertyInfo, StateAttribute>
    handler)
    {
        var stateProps = this.GetType().GetProperties(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty);
        foreach (var prop in stateProps)
        {
            var stateAttribute = prop.GetCustomAttributes<StateAttribute>
                ().SingleOrDefault();
            if (stateAttribute == null)
                continue;

            handler(prop, stateAttribute);
        }
    }
}
