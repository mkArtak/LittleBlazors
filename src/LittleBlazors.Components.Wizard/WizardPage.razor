@using System.Reflection

@if (this.IsPageActive)
{
    @ChildContent
}

@code {
    /// <summary>
    /// Gets the wizard in which current page is loaded.
    /// </summary>
    [CascadingParameter]
    protected Wizard Wizard { get; private set; }

    /// <summary>
    /// Gets the state manager of the wizard.
    /// </summary>
    [CascadingParameter]
    protected IWizardStateManager StateManager { get; private set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; }

    protected override void OnInitialized()
    {
        this.Wizard.AddPage(this);

        base.OnInitialized();
    }

    internal void StoreState()
    {
        ForEachStateProperty((pi, sa) =>
        {
            this.StateManager.Set(GetStoreManagerKeyNameForProperty(sa, pi), pi.GetValue(this));
        });
    }

    private static string GetStoreManagerKeyNameForProperty(StateAttribute sa, PropertyInfo pi)
    {
        return sa.Key ?? pi.Name;
    }

    /// <summary>
    /// Indicates whether the page is currently active in the wizard or not.
    /// Rendering of each page depends on this flag. If the value is `false`, no content should be rendered.
    /// This is important for pages, which derieve from the <see cref="WizardPage"/> component.
    /// </summary>
    protected bool IsPageActive => this.Wizard.CurrentPage == this;

    private void ForEachStateProperty(Action<PropertyInfo, StateAttribute>
    handler)
    {
        var stateProps = this.GetType().GetProperties(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty);
        foreach (var prop in stateProps)
        {
            var stateAttribute = prop.GetCustomAttributes<StateAttribute>
                ().SingleOrDefault();
            if (stateAttribute == null)
                continue;

            handler(prop, stateAttribute);
        }
    }

    /// <summary>
    /// Called when the page is activated.
    /// </summary>
    protected internal virtual Task OnNavigatedTo()
    {
        return Task.CompletedTask;
    }

    /// <summary>
    /// Called when the current page is active and the wizard is about to change to a different page.
    /// </summary>
    /// <param name="navigatingForward">
    /// Indicates whether the user is navigating to the next page or not.
    /// true - if the navigation is to the next page. false - otherwise.
    /// </param>
    /// <returns>Return `true` to proceed with navigation. `false` to abort navigation</returns>
    protected internal virtual Task<bool> OnNavigatingAway(bool navigatingForward)
    {
        return Task.FromResult(true);
    }
}
